--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -1,3 +1,3 @@
 bin_PROGRAMS = chinadns
 
-chinadns_SOURCES = chinadns.c local_ns_parser.c local_ns_parser.h
+chinadns_SOURCES = chinadns.c
--- a/src/chinadns.c
+++ b/src/chinadns.c
@@ -31,8 +31,6 @@
 #include <sys/time.h>
 #include <sys/param.h>
 
-#include "local_ns_parser.h"
-
 #include "config.h"
 
 typedef struct {
@@ -573,8 +571,8 @@ static void dns_handle_local() {
   ns_msg msg;
   len = recvfrom(local_sock, global_buf, BUF_SIZE, 0, src_addr, &src_addrlen);
   if (len > 0) {
-    if (local_ns_initparse((const u_char *)global_buf, len, &msg) < 0) {
-      ERR("local_ns_initparse");
+    if (ns_initparse((const u_char *)global_buf, len, &msg) < 0) {
+      ERR("ns_initparse");
       free(src_addr);
       return;
     }
@@ -661,8 +659,8 @@ static void dns_handle_remote() {
   ns_msg msg;
   len = recvfrom(remote_sock, global_buf, BUF_SIZE, 0, src_addr, &src_len);
   if (len > 0) {
-    if (local_ns_initparse((const u_char *)global_buf, len, &msg) < 0) {
-      ERR("local_ns_initparse");
+    if (ns_initparse((const u_char *)global_buf, len, &msg) < 0) {
+      ERR("ns_initparse");
       free(src_addr);
       return;
     }
@@ -733,8 +731,8 @@ static const char *hostname_from_questio
   if (rrmax == 0)
     return NULL;
   for (rrnum = 0; rrnum < rrmax; rrnum++) {
-    if (local_ns_parserr(&msg, ns_s_qd, rrnum, &rr)) {
-      ERR("local_ns_parserr");
+    if (ns_parserr(&msg, ns_s_qd, rrnum, &rr)) {
+      ERR("ns_parserr");
       return NULL;
     }
     result = ns_rr_name(rr);
@@ -773,8 +771,8 @@ static int should_filter_query(ns_msg ms
     return -1;
   }
   for (rrnum = 0; rrnum < rrmax; rrnum++) {
-    if (local_ns_parserr(&msg, ns_s_an, rrnum, &rr)) {
-      ERR("local_ns_parserr");
+    if (ns_parserr(&msg, ns_s_an, rrnum, &rr)) {
+      ERR("ns_parserr");
       return 0;
     }
     u_int type;
