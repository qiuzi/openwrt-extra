diff --git a/CMakeLists.txt b/CMakeLists.txt
index c9ad81c..04c6e28 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -10,12 +10,20 @@ if(NOT DEFINED N2N_OPTION_AES)
 set(N2N_OPTION_AES ON)
 endif(NOT DEFINED N2N_OPTION_AES)
 
+if(NOT DEFINED N2N_OPTION_POLARSSL)
+set(N2N_OPTION_POLARSSL OFF)
+endif(NOT DEFINED N2N_OPTION_POLARSSL)
+
 add_definitions(-DN2N_VERSION='\"${N2N_VERSION}\"' -DN2N_OSNAME='\"${N2N_OSNAME}\"')
 
 if(N2N_OPTION_AES)
 add_definitions(-DN2N_HAVE_AES)
 endif(N2N_OPTION_AES)
 
+if(N2N_OPTION_POLARSSL)
+add_definitions(-DN2N_HAVE_POLARSSL)
+endif(N2N_OPTION_POLARSSL)
+
 # Build information
 if(NOT DEFINED BUILD_SHARED_LIBS)
 set(BUILD_SHARED_LIBS OFF)
diff --git a/Makefile b/Makefile
index 89bf660..d98a32c 100644
--- a/Makefile
+++ b/Makefile
@@ -19,12 +19,20 @@ LIBS_EDGE_OPT=
 
 N2N_OPTION_AES?="yes"
 #N2N_OPTION_AES=no
+#If you select "no" it defaults to OpenSSL.
+#N2N_OPTION_POLARSSL="yes"
+N2N_OPTION_POLARSSL="no"
 
 ifeq ($(N2N_OPTION_AES), "yes")
     N2N_DEFINES+="-DN2N_HAVE_AES"
     LIBS_EDGE_OPT+=-lcrypto
 endif
 
+ifeq ($(N2N_OPTION_POLARSSL), "yes")
+    N2N_DEFINES+="-DN2N_HAVE_POLARSSL"
+endif
+
+
 ifeq ($(SNM), yes)
     N2N_DEFINES+="-DN2N_MULTIPLE_SUPERNODES"
 endif
diff --git a/transform_aes.c b/transform_aes.c
index a8c4969..5446a96 100644
--- a/transform_aes.c
+++ b/transform_aes.c
@@ -6,10 +6,14 @@
 #include "n2n.h"
 #include "n2n_transforms.h"
 
-#if defined(N2N_HAVE_AES)
-
-
+//#if defined(N2N_HAVE_AES) /* Wasn't getting this? */
+#if defined(DN2N_HAVE_AES)
+#if defined(DN2N_HAVE_POLARSSL)
+#include "polarssl/aes.h"
+#else
 #include "openssl/aes.h"
+#endif
+
 #ifndef _MSC_VER
 /* Not included in Visual Studio 2008 */
 #include <strings.h> /* index() */
@@ -20,8 +24,21 @@
 #define N2N_AES_TRANSFORM_VERSION       1  /* version of the transform encoding */
 #define N2N_AES_IVEC_SIZE               32 /* Enough space for biggest AES ivec */
 
+#define AES_BLOCK_SIZE 			16 /* Was provided by OpenSSL, now we need it ourselves*/
+
 typedef unsigned char n2n_aes_ivec_t[N2N_AES_IVEC_SIZE];
 
+#if defined(DN2N_HAVE_POLARSSL)
+struct sa_aes
+{
+    n2n_cipherspec_t    spec;           /* cipher spec parameters */
+    n2n_sa_t            sa_id;          /* security association index */
+    aes_context             enc_key;        /* tx key */
+    n2n_aes_ivec_t      enc_ivec;       /* tx CBC state */
+    aes_context             dec_key;        /* tx key */
+    n2n_aes_ivec_t      dec_ivec;       /* tx CBC state */
+};
+#else
 struct sa_aes
 {
     n2n_cipherspec_t    spec;           /* cipher spec parameters */
@@ -31,6 +48,7 @@ struct sa_aes
     AES_KEY             dec_key;        /* tx key */
     n2n_aes_ivec_t      dec_ivec;       /* tx CBC state */
 };
+#endif
 
 typedef struct sa_aes sa_aes_t;
 
@@ -170,10 +188,20 @@ static int transop_encode_aes( n2n_trans_op_t * arg,
             traceEvent( TRACE_DEBUG, "padding = %u", assembly[ len2-1 ] );
 
             memset( &(sa->enc_ivec), 0, sizeof(N2N_AES_IVEC_SIZE) );
+
+#if defined(DN2N_HAVE_POLARSSL)
+            aes_crypt_cbc( &(sa->enc_key),
+			   1,
+			   len2,
+			   sa->enc_ivec,
+			   assembly,
+			   outbuf + TRANSOP_AES_VER_SIZE + TRANSOP_AES_SA_SIZE );
+#else
             AES_cbc_encrypt( assembly, /* source */
                              outbuf + TRANSOP_AES_VER_SIZE + TRANSOP_AES_SA_SIZE, /* dest */
                              len2, /* enc size */
                              &(sa->enc_key), sa->enc_ivec, 1 /* encrypt */ );
+#endif
 
             len2 += TRANSOP_AES_VER_SIZE + TRANSOP_AES_SA_SIZE; /* size of data carried in UDP. */
         }
@@ -265,11 +293,22 @@ static int transop_decode_aes( n2n_trans_op_t * arg,
                     uint8_t padding;
 
                     memset( &(sa->dec_ivec), 0, sizeof(N2N_AES_IVEC_SIZE) );
+
+#if defined(DN2N_HAVE_POLARSSL)
+                  aes_crypt_cbc( &(sa->dec_key),
+				 1,
+				 len,
+				 sa->dec_ivec,
+				 inbuf + TRANSOP_AES_VER_SIZE + TRANSOP_AES_SA_SIZE,
+				 assembly
+				);
+#else
                     AES_cbc_encrypt( (inbuf + TRANSOP_AES_VER_SIZE + TRANSOP_AES_SA_SIZE),
                                      assembly, /* destination */
                                      len, 
                                      &(sa->dec_key),
                                      sa->dec_ivec, 0 /* decrypt */ );
+#endif
 
                     /* last byte is how much was padding: max value should be
                      * AES_BLOCKSIZE-1 */
@@ -362,8 +401,8 @@ static int transop_addspec_aes( n2n_trans_op_t * arg, const n2n_cipherspec_t * c
                 size_t aes_keysize_bits;
 
                 /* Clear out any old possibly longer key matter. */
-                memset( &(sa->enc_key), 0, sizeof(AES_KEY) );
-                memset( &(sa->dec_key), 0, sizeof(AES_KEY) );
+                memset( &(sa->enc_key), 0, sizeof(aes_context) );
+                memset( &(sa->dec_key), 0, sizeof(aes_context) );
 
                 memset( &(sa->enc_ivec), 0, sizeof(N2N_AES_IVEC_SIZE) );
                 memset( &(sa->dec_ivec), 0, sizeof(N2N_AES_IVEC_SIZE) );
@@ -375,8 +414,13 @@ static int transop_addspec_aes( n2n_trans_op_t * arg, const n2n_cipherspec_t * c
                  * size. If fewer bits specified then the rest will be
                  * zeroes. AES acceptable key sizes are 128, 192 and 256
                  * bits. */
+#if defined(DN2N_HAVE_POLARSSL)
+		aes_setkey_enc(&(sa->enc_key), keybuf, aes_keysize_bits);
+		aes_setkey_dec(&(sa->enc_key), keybuf, aes_keysize_bits);
+#else
                 AES_set_encrypt_key( keybuf, aes_keysize_bits, &(sa->enc_key));
                 AES_set_decrypt_key( keybuf, aes_keysize_bits, &(sa->dec_key));
+#endif
                 /* Leave ivecs set to all zeroes */
                 
                 traceEvent( TRACE_DEBUG, "transop_addspec_aes sa_id=%u, %u bits data=%s.\n",
@@ -480,9 +524,9 @@ int transop_aes_init( n2n_trans_op_t * ttt )
             sa = &(priv->sa[i]);
             sa->sa_id=0;
             memset( &(sa->spec), 0, sizeof(n2n_cipherspec_t) );
-            memset( &(sa->enc_key), 0, sizeof(AES_KEY) );
+            memset( &(sa->enc_key), 0, sizeof(aes_context) );
             memset( &(sa->enc_ivec), 0, sizeof(N2N_AES_IVEC_SIZE) );
-            memset( &(sa->dec_key), 0, sizeof(AES_KEY) );
+            memset( &(sa->dec_key), 0, sizeof(aes_context) );
             memset( &(sa->dec_ivec), 0, sizeof(N2N_AES_IVEC_SIZE) );
         }
 
